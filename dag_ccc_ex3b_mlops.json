{
  "pipelineSpec": {
    "components": {
      "comp-preprocess": {
        "executorLabel": "exec-preprocess",
        "inputDefinitions": {
          "artifacts": {
            "staged_bq_table": {
              "artifactType": {
                "schemaTitle": "system.Artifact",
                "schemaVersion": "0.0.1"
              }
            }
          },
          "parameters": {
            "app_prefix": {
              "type": "STRING"
            },
            "gcs_pipeline_root": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "staged_test_dataset": {
              "artifactType": {
                "schemaTitle": "system.Artifact",
                "schemaVersion": "0.0.1"
              }
            },
            "staged_training_dataset": {
              "artifactType": {
                "schemaTitle": "system.Artifact",
                "schemaVersion": "0.0.1"
              }
            },
            "staged_validation_dataset": {
              "artifactType": {
                "schemaTitle": "system.Artifact",
                "schemaVersion": "0.0.1"
              }
            }
          }
        }
      },
      "comp-stage": {
        "executorLabel": "exec-stage",
        "inputDefinitions": {
          "parameters": {
            "bq_dataset": {
              "type": "STRING"
            },
            "bq_projectid": {
              "type": "STRING"
            },
            "bq_table": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "output_dataset": {
              "artifactType": {
                "schemaTitle": "system.Artifact",
                "schemaVersion": "0.0.1"
              }
            }
          }
        }
      }
    },
    "deploymentSpec": {
      "executors": {
        "exec-preprocess": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "preprocess"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'pandas' 'fsspec' 'gcsfs' 'scikit-learn' 'kfp==1.8.14' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef preprocess(gcs_pipeline_root: str,\n               app_prefix: str,\n               staged_bq_table: InputPath('staged_bq_table'), \n               staged_training_dataset: OutputPath('staged_training_dataset'), \n               staged_validation_dataset: OutputPath('staged_validation_dataset'), \n               staged_test_dataset: OutputPath('staged_test_dataset')):\n\n    import pandas as pd\n    from sklearn.model_selection import train_test_split\n\n    dataset = pd.read_csv(staged_bq_table, index_col=0)\n\n    _user_id_column=\"synerise_client_id\"\n    _target_column=\"y_if_trans\"\n    _weight_column=\"weight\"\n    _excluded_columns = [_user_id_column, _weight_column]\n    ## drop excluded columns\n    ndataset = dataset.drop(_excluded_columns, axis =1)\n\n    X = ndataset.loc[:, ndataset.columns != _target_column]\n    Y = ndataset.loc[:, ndataset.columns == _target_column]\n    ## Feature engineering if any, e.g\n    ## from sklearn.preprocessing import MinMaxScaler\n    ## scaler = MinMaxScaler(feature_range = (0,1))\n    ## scaler.fit(X)\n\n    ## Split dataset into training, validation and testing sets\n    X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=101)\n    X_train, X_val, Y_train, Y_val = train_test_split(X_train, Y_train, test_size=0.2, random_state=101)\n\n    training_dataset = pd.concat([X_train,Y_train], axis = 1)\n    validation_dataset = pd.concat([X_val,Y_val], axis = 1)\n    test_dataset = pd.concat([X_test,Y_test], axis = 1)\n\n    gcs_output_dataset=f\"{gcs_pipeline_root}/staging/{app_prefix}.csv\"\n    gcs_output_training_dataset=f\"{gcs_pipeline_root}/staging/{app_prefix}_training.csv\"\n    gcs_output_validation_dataset=f\"{gcs_pipeline_root}/staging/{app_prefix}_validation.csv\"\n    gcs_output_testing_dataset=f\"{gcs_pipeline_root}/staging/{app_prefix}_testing.csv\"\n\n    ## Stage training, validation and testing datasets to GCS\n    training_dataset.to_csv(gcs_output_training_dataset, index = False)\n    validation_dataset.to_csv(gcs_output_validation_dataset,index = False)\n    test_dataset.to_csv(gcs_output_testing_dataset, index = False)\n\n"
            ],
            "image": "python:3.7"
          }
        },
        "exec-stage": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "stage"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'pandas' 'db-dtypes' 'google-cloud-bigquery' 'pyarrow' 'kfp==1.8.14' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef stage(bq_projectid: str, bq_dataset: str, bq_table: str, output_dataset: OutputPath('staged_bq_table')):\n    from google.cloud import bigquery\n    import google.auth\n\n    ##authenticate \n    auth_credentials, auth_project = google.auth.default()\n    print(\"Project: \"+auth_project)\n    client = bigquery.Client(project=bq_projectid, credentials = auth_credentials)\n\n\n    query = f\"SELECT * FROM {bq_projectid}.{bq_dataset}.{bq_table}\"\n    print(query)\n\n    ## fetch query results as dataframe\n    dataframe = client.query(query).to_dataframe()\n    print(dataframe.head()) \n\n    ## export resultset into csv file om GCS\n    dataframe.to_csv(output_dataset)\n\n"
            ],
            "image": "python:3.7"
          }
        }
      }
    },
    "pipelineInfo": {
      "name": "wf-kubeflow-mlops"
    },
    "root": {
      "dag": {
        "tasks": {
          "preprocess": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-preprocess"
            },
            "dependentTasks": [
              "stage"
            ],
            "inputs": {
              "artifacts": {
                "staged_bq_table": {
                  "taskOutputArtifact": {
                    "outputArtifactKey": "output_dataset",
                    "producerTask": "stage"
                  }
                }
              },
              "parameters": {
                "app_prefix": {
                  "componentInputParameter": "in_app_prefix"
                },
                "gcs_pipeline_root": {
                  "componentInputParameter": "in_pipeline_root"
                }
              }
            },
            "taskInfo": {
              "name": "preprocess"
            }
          },
          "stage": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-stage"
            },
            "inputs": {
              "parameters": {
                "bq_dataset": {
                  "componentInputParameter": "in_bq_dataset"
                },
                "bq_projectid": {
                  "componentInputParameter": "in_bq_projectid"
                },
                "bq_table": {
                  "componentInputParameter": "in_bq_table"
                }
              }
            },
            "taskInfo": {
              "name": "stage"
            }
          }
        }
      },
      "inputDefinitions": {
        "parameters": {
          "in_app_prefix": {
            "type": "STRING"
          },
          "in_bq_dataset": {
            "type": "STRING"
          },
          "in_bq_projectid": {
            "type": "STRING"
          },
          "in_bq_table": {
            "type": "STRING"
          },
          "in_pipeline_root": {
            "type": "STRING"
          }
        }
      }
    },
    "schemaVersion": "2.0.0",
    "sdkVersion": "kfp-1.8.14"
  },
  "runtimeConfig": {
    "parameters": {
      "in_app_prefix": {
        "stringValue": "demo"
      },
      "in_bq_dataset": {
        "stringValue": "xxxx"
      },
      "in_bq_projectid": {
        "stringValue": "defaultprojectid"
      },
      "in_bq_table": {
        "stringValue": "yyyy"
      },
      "in_pipeline_root": {
        "stringValue": ""
      }
    }
  }
}